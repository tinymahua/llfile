// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/lldisk.dart';
import 'api/llfs.dart';
import 'api/sandbar.dart';
import 'api/sandbar_node.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1820956045;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_llfile',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<Uint8List> crateApiSandbarAesDecrypt(
      {required List<int> palAesKeyBytes,
      required List<int> encryptedBytes,
      BigInt? nonceLen});

  Future<Uint8List> crateApiSandbarAesEncrypt(
      {required List<int> palAesKeyBytes, required List<int> plainBytes});

  Future<Uint8List> crateApiSandbarArgon2PwdHash({required List<int> password});

  Future<Uint8List> crateApiSandbarCbDecrypt(
      {required List<int> peerPalCryptoPublicKeyBytes,
      required List<int> myPalCryptoSecretKeyBytes,
      required List<int> encryptedBytes,
      BigInt? nonceLen});

  Future<Uint8List> crateApiSandbarCbEncrypt(
      {required List<int> peerPalCryptoPublicKeyBytes,
      required List<int> myPalCryptoSecretKeyBytes,
      required List<int> plainBytes});

  Future<Uint8List> crateApiSandbarGenerateAesKey();

  Future<SandbarAuth> crateApiSandbarGenerateAuth({required String password});

  Future<CbKeyPair> crateApiSandbarGenerateCbKeyPair();

  List<DiskPartition> crateApiLldiskGetDiskPartitions();

  Stream<FsEntity> crateApiLlfsGetFsEntities({required String rootPath});

  Future<BigInt> crateApiSandbarNodeGetRpcPort();

  Future<SandbarNodeConfig> crateApiSandbarNodeGetSandbarNodeConfig(
      {required String configFilePath});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<void> crateApiSandbarNodeStartSandbarNodeService(
      {required String configFilePath});

  Future<void> crateApiSandbarNodeStopSandbarNodeService(
      {required String configFilePath});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Uint8List> crateApiSandbarAesDecrypt(
      {required List<int> palAesKeyBytes,
      required List<int> encryptedBytes,
      BigInt? nonceLen}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(palAesKeyBytes, serializer);
        sse_encode_list_prim_u_8_loose(encryptedBytes, serializer);
        sse_encode_opt_box_autoadd_usize(nonceLen, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarAesDecryptConstMeta,
      argValues: [palAesKeyBytes, encryptedBytes, nonceLen],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarAesDecryptConstMeta => const TaskConstMeta(
        debugName: "aes_decrypt",
        argNames: ["palAesKeyBytes", "encryptedBytes", "nonceLen"],
      );

  @override
  Future<Uint8List> crateApiSandbarAesEncrypt(
      {required List<int> palAesKeyBytes, required List<int> plainBytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(palAesKeyBytes, serializer);
        sse_encode_list_prim_u_8_loose(plainBytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarAesEncryptConstMeta,
      argValues: [palAesKeyBytes, plainBytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarAesEncryptConstMeta => const TaskConstMeta(
        debugName: "aes_encrypt",
        argNames: ["palAesKeyBytes", "plainBytes"],
      );

  @override
  Future<Uint8List> crateApiSandbarArgon2PwdHash(
      {required List<int> password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarArgon2PwdHashConstMeta,
      argValues: [password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarArgon2PwdHashConstMeta =>
      const TaskConstMeta(
        debugName: "argon2_pwd_hash",
        argNames: ["password"],
      );

  @override
  Future<Uint8List> crateApiSandbarCbDecrypt(
      {required List<int> peerPalCryptoPublicKeyBytes,
      required List<int> myPalCryptoSecretKeyBytes,
      required List<int> encryptedBytes,
      BigInt? nonceLen}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(peerPalCryptoPublicKeyBytes, serializer);
        sse_encode_list_prim_u_8_loose(myPalCryptoSecretKeyBytes, serializer);
        sse_encode_list_prim_u_8_loose(encryptedBytes, serializer);
        sse_encode_opt_box_autoadd_usize(nonceLen, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarCbDecryptConstMeta,
      argValues: [
        peerPalCryptoPublicKeyBytes,
        myPalCryptoSecretKeyBytes,
        encryptedBytes,
        nonceLen
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarCbDecryptConstMeta => const TaskConstMeta(
        debugName: "cb_decrypt",
        argNames: [
          "peerPalCryptoPublicKeyBytes",
          "myPalCryptoSecretKeyBytes",
          "encryptedBytes",
          "nonceLen"
        ],
      );

  @override
  Future<Uint8List> crateApiSandbarCbEncrypt(
      {required List<int> peerPalCryptoPublicKeyBytes,
      required List<int> myPalCryptoSecretKeyBytes,
      required List<int> plainBytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(peerPalCryptoPublicKeyBytes, serializer);
        sse_encode_list_prim_u_8_loose(myPalCryptoSecretKeyBytes, serializer);
        sse_encode_list_prim_u_8_loose(plainBytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarCbEncryptConstMeta,
      argValues: [
        peerPalCryptoPublicKeyBytes,
        myPalCryptoSecretKeyBytes,
        plainBytes
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarCbEncryptConstMeta => const TaskConstMeta(
        debugName: "cb_encrypt",
        argNames: [
          "peerPalCryptoPublicKeyBytes",
          "myPalCryptoSecretKeyBytes",
          "plainBytes"
        ],
      );

  @override
  Future<Uint8List> crateApiSandbarGenerateAesKey() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarGenerateAesKeyConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarGenerateAesKeyConstMeta =>
      const TaskConstMeta(
        debugName: "generate_aes_key",
        argNames: [],
      );

  @override
  Future<SandbarAuth> crateApiSandbarGenerateAuth({required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sandbar_auth,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarGenerateAuthConstMeta,
      argValues: [password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarGenerateAuthConstMeta =>
      const TaskConstMeta(
        debugName: "generate_auth",
        argNames: ["password"],
      );

  @override
  Future<CbKeyPair> crateApiSandbarGenerateCbKeyPair() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_cb_key_pair,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarGenerateCbKeyPairConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarGenerateCbKeyPairConstMeta =>
      const TaskConstMeta(
        debugName: "generate_cb_key_pair",
        argNames: [],
      );

  @override
  List<DiskPartition> crateApiLldiskGetDiskPartitions() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_disk_partition,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiLldiskGetDiskPartitionsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLldiskGetDiskPartitionsConstMeta =>
      const TaskConstMeta(
        debugName: "get_disk_partitions",
        argNames: [],
      );

  @override
  Stream<FsEntity> crateApiLlfsGetFsEntities({required String rootPath}) {
    final s = RustStreamSink<FsEntity>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_fs_entity_Sse(s, serializer);
        sse_encode_String(rootPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiLlfsGetFsEntitiesConstMeta,
      argValues: [s, rootPath],
      apiImpl: this,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateApiLlfsGetFsEntitiesConstMeta => const TaskConstMeta(
        debugName: "get_fs_entities",
        argNames: ["s", "rootPath"],
      );

  @override
  Future<BigInt> crateApiSandbarNodeGetRpcPort() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarNodeGetRpcPortConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarNodeGetRpcPortConstMeta =>
      const TaskConstMeta(
        debugName: "get_rpc_port",
        argNames: [],
      );

  @override
  Future<SandbarNodeConfig> crateApiSandbarNodeGetSandbarNodeConfig(
      {required String configFilePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(configFilePath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sandbar_node_config,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarNodeGetSandbarNodeConfigConstMeta,
      argValues: [configFilePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarNodeGetSandbarNodeConfigConstMeta =>
      const TaskConstMeta(
        debugName: "get_sandbar_node_config",
        argNames: ["configFilePath"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> crateApiSandbarNodeStartSandbarNodeService(
      {required String configFilePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(configFilePath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarNodeStartSandbarNodeServiceConstMeta,
      argValues: [configFilePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarNodeStartSandbarNodeServiceConstMeta =>
      const TaskConstMeta(
        debugName: "start_sandbar_node_service",
        argNames: ["configFilePath"],
      );

  @override
  Future<void> crateApiSandbarNodeStopSandbarNodeService(
      {required String configFilePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(configFilePath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSandbarNodeStopSandbarNodeServiceConstMeta,
      argValues: [configFilePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSandbarNodeStopSandbarNodeServiceConstMeta =>
      const TaskConstMeta(
        debugName: "stop_sandbar_node_service",
        argNames: ["configFilePath"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<FsEntity> dco_decode_StreamSink_fs_entity_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  CbKeyPair dco_decode_cb_key_pair(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CbKeyPair(
      publicKeyBytesB64: dco_decode_String(arr[0]),
      privateKeyBytesB64: dco_decode_String(arr[1]),
    );
  }

  @protected
  DiskPartition dco_decode_disk_partition(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DiskPartition(
      name: dco_decode_String(arr[0]),
      mountPoint: dco_decode_String(arr[1]),
    );
  }

  @protected
  FsEntity dco_decode_fs_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FsEntity(
      name: dco_decode_String(arr[0]),
      isDir: dco_decode_bool(arr[1]),
      dateCreated: dco_decode_String(arr[2]),
    );
  }

  @protected
  List<DiskPartition> dco_decode_list_disk_partition(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_disk_partition).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  SandbarAuth dco_decode_sandbar_auth(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return SandbarAuth(
      masterKeyBytesB64: dco_decode_String(arr[0]),
      masterKeyEncryptedBytesB64: dco_decode_String(arr[1]),
      publicKeyBytesB64: dco_decode_String(arr[2]),
      privateKeyBytesB64: dco_decode_String(arr[3]),
      privateKeyEncryptedBytesB64: dco_decode_String(arr[4]),
    );
  }

  @protected
  SandbarNodeConfig dco_decode_sandbar_node_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SandbarNodeConfig(
      rpcPort: dco_decode_usize(arr[0]),
      sbRpcPort: dco_decode_usize(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<FsEntity> sse_decode_StreamSink_fs_entity_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  CbKeyPair sse_decode_cb_key_pair(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_publicKeyBytesB64 = sse_decode_String(deserializer);
    var var_privateKeyBytesB64 = sse_decode_String(deserializer);
    return CbKeyPair(
        publicKeyBytesB64: var_publicKeyBytesB64,
        privateKeyBytesB64: var_privateKeyBytesB64);
  }

  @protected
  DiskPartition sse_decode_disk_partition(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_mountPoint = sse_decode_String(deserializer);
    return DiskPartition(name: var_name, mountPoint: var_mountPoint);
  }

  @protected
  FsEntity sse_decode_fs_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_isDir = sse_decode_bool(deserializer);
    var var_dateCreated = sse_decode_String(deserializer);
    return FsEntity(
        name: var_name, isDir: var_isDir, dateCreated: var_dateCreated);
  }

  @protected
  List<DiskPartition> sse_decode_list_disk_partition(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DiskPartition>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_disk_partition(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SandbarAuth sse_decode_sandbar_auth(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_masterKeyBytesB64 = sse_decode_String(deserializer);
    var var_masterKeyEncryptedBytesB64 = sse_decode_String(deserializer);
    var var_publicKeyBytesB64 = sse_decode_String(deserializer);
    var var_privateKeyBytesB64 = sse_decode_String(deserializer);
    var var_privateKeyEncryptedBytesB64 = sse_decode_String(deserializer);
    return SandbarAuth(
        masterKeyBytesB64: var_masterKeyBytesB64,
        masterKeyEncryptedBytesB64: var_masterKeyEncryptedBytesB64,
        publicKeyBytesB64: var_publicKeyBytesB64,
        privateKeyBytesB64: var_privateKeyBytesB64,
        privateKeyEncryptedBytesB64: var_privateKeyEncryptedBytesB64);
  }

  @protected
  SandbarNodeConfig sse_decode_sandbar_node_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rpcPort = sse_decode_usize(deserializer);
    var var_sbRpcPort = sse_decode_usize(deserializer);
    return SandbarNodeConfig(rpcPort: var_rpcPort, sbRpcPort: var_sbRpcPort);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_fs_entity_Sse(
      RustStreamSink<FsEntity> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_fs_entity,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_cb_key_pair(CbKeyPair self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.publicKeyBytesB64, serializer);
    sse_encode_String(self.privateKeyBytesB64, serializer);
  }

  @protected
  void sse_encode_disk_partition(DiskPartition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.mountPoint, serializer);
  }

  @protected
  void sse_encode_fs_entity(FsEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_bool(self.isDir, serializer);
    sse_encode_String(self.dateCreated, serializer);
  }

  @protected
  void sse_encode_list_disk_partition(
      List<DiskPartition> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_disk_partition(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_sandbar_auth(SandbarAuth self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.masterKeyBytesB64, serializer);
    sse_encode_String(self.masterKeyEncryptedBytesB64, serializer);
    sse_encode_String(self.publicKeyBytesB64, serializer);
    sse_encode_String(self.privateKeyBytesB64, serializer);
    sse_encode_String(self.privateKeyEncryptedBytesB64, serializer);
  }

  @protected
  void sse_encode_sandbar_node_config(
      SandbarNodeConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.rpcPort, serializer);
    sse_encode_usize(self.sbRpcPort, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
